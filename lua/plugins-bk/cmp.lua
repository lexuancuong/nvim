-- local cmp_status_ok, cmp = pcall(require, 'cmp')
-- if not cmp_status_ok then
--   return
-- end
--
-- local luasnip_status_ok, luasnip = pcall(require, 'luasnip')
-- if not luasnip_status_ok then
--   return
-- end
-- luasnip.config.set_config {
--    history = true,
--    updateevents = "TextChanged,TextChangedI",
-- }
-- require("luasnip.loaders.from_vscode").lazy_load()
-- vim.opt.completeopt = "menuone,noselect"
--
-- local function border(hl_name)
--    return {
--       { "╭", hl_name },
--       { "─", hl_name },
--       { "╮", hl_name },
--       { "│", hl_name },
--       { "╯", hl_name },
--       { "─", hl_name },
--       { "╰", hl_name },
--       { "│", hl_name },
--    }
-- end
--
-- local cmp_window = require "cmp.utils.window"
--
-- function cmp_window:has_scrollbar()
--    return false
-- end
--
-- local options = {
--    window = {
--       completion = {
--          border = border "CmpBorder",
--         keyword_length = 2,
--       },
--       documentation = {
--          border = border "CmpDocBorder",
--       },
--    },
--     snippet = {
--       expand = function(args)
--         luasnip.lsp_expand(args.body)
--       end,
--     },
--    formatting = {
--       format = function(_, vim_item)
--          local icons = {
--            Text = "",
--            Method = "",
--            Function = "",
--            Constructor = "",
--            Field = "ﰠ",
--            Variable = "",
--            Class = "ﴯ",
--            Interface = "",
--            Module = "",
--            Property = "ﰠ",
--            Unit = "塞",
--            Value = "",
--            Enum = "",
--            Keyword = "",
--            Snippet = "",
--            Color = "",
--            File = "",
--            Reference = "",
--            Folder = "",
--            EnumMember = "",
--            Constant = "",
--            Struct = "פּ",
--            Event = "",
--            Operator = "",
--            TypeParameter = "",
--           }
--          vim_item.kind = string.format("%s %s", icons[vim_item.kind], vim_item.kind)
--          return vim_item
--       end,
--    },
--    mapping = {
--       ["<C-n>"] = cmp.mapping.select_next_item(),
--       ["<C-p>"] = cmp.mapping.select_prev_item(),
--       ["<C-d>"] = cmp.mapping.scroll_docs(-4),
--       ["<C-f>"] = cmp.mapping.scroll_docs(4),
--       ["<C-Space>"] = cmp.mapping.complete(),
--       ["<C-e>"] = cmp.mapping.close(),
--       ["<CR>"] = cmp.mapping.confirm {
--          behavior = cmp.ConfirmBehavior.Replace,
--          select = true,
--       },
--       ["<Tab>"] = cmp.mapping(function(fallback)
--          if cmp.visible() then
--             cmp.select_next_item()
--          elseif require("luasnip").expand_or_jumpable() then
--             vim.fn.feedkeys(vim.api.nvim_replace_termcodes("<Plug>luasnip-expand-or-jump", true, true, true), "")
--          else
--             fallback()
--          end
--       end, {
--          "i",
--          "s",
--       }),
--       ["<S-Tab>"] = cmp.mapping(function(fallback)
--          if cmp.visible() then
--             cmp.select_prev_item()
--          elseif require("luasnip").jumpable(-1) then
--             vim.fn.feedkeys(vim.api.nvim_replace_termcodes("<Plug>luasnip-jump-prev", true, true, true), "")
--          else
--             fallback()
--          end
--       end, {
--          "i",
--          "s",
--       }),
--    },
--    sources = {
--       {
--         name = "nvim_lsp",
--         max_item_count = 5,
--       },
--       {
--         name = "copilot",
--         -- keyword_length = 0,
--         max_item_count = 3,
--         trigger_characters = {
--           {
--             ".",
--             ":",
--             "(",
--             "'",
--             '"',
--             "[",
--             ",",
--             "#",
--             "*",
--             "@",
--             "|",
--             "=",
--             "-",
--             "{",
--             "/",
--             "\\",
--             "+",
--             "?",
--             " ",
--             "\t",
--             "\n",
--             ")",
--           },
--         },
--       },
--       { name = "luasnip" },
--       { name = "buffer" },
--       { name = "nvim_lua" },
--       { name = "path" },
--    },
-- }
--
-- cmp.setup(options)
--
-- local cmp_autopairs = require "nvim-autopairs.completion.cmp"
-- cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done())
